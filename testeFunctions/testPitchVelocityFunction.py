import os
import sys
import numpy as np
import matplotlib.pyplot as plt

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from utilProcessing import parseCOMU, midiFileTo4bin

def show_pitch_velocity_table(midi_pairs, quantized_pairs, midi_path):
    all_pairs = sorted(midi_pairs.union(quantized_pairs))
    rows = []
    for pair in all_pairs:
        midi_mark = "OK" if pair in midi_pairs else ""
        quant_mark = "OK" if pair in quantized_pairs else ""
        rows.append((str(pair), midi_mark, quant_mark))

    fig, ax = plt.subplots(figsize=(8, min(0.4 * len(rows), 20)))
    ax.axis('off')
    table_data = [("Pitch/Velocity", "MIDI", "Quantized")] + rows
    table = ax.table(cellText=table_data, loc="center", cellLoc="center", colWidths=[0.4, 0.2, 0.2])
    table.scale(1, 1.2)
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    plt.tight_layout()
    plt.savefig(f"pitches_{os.path.splitext(os.path.basename(midi_path))[0]}.png")

def testPitchVelocity(midi_path="../midiDataTest/commu00003.mid"):
    """Check that all pitch/velocity pairs from the MIDI file are present in
    the quantized data generated by midiFileTo4bin.
    """
    notes = parseCOMU(midi_path)
    midi_pairs = {(note.pitch, note.velocity) for note in notes}
    quantized = midiFileTo4bin(midi_path)
    quantized_pairs = {(int(row[6]), int(row[7])) for row in quantized}

    show_pitch_velocity_table(midi_pairs, quantized_pairs, midi_path)

    missing = midi_pairs - quantized_pairs
    if not missing:
        return "All pitch and velocity pairs from the MIDI file are present in the quantized data."
    return f"Missing pitch/velocity pairs in the quantized data: {sorted(missing)}"

if __name__ == "__main__":
    message = testPitchVelocity()
    print(message)
